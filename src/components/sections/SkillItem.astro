---
// Modern Skill Item Component - Icon + Tag based
import Card from '../ui/Card.astro';

export interface Props {
  name: string;
  proficiency: string;
  proficiencyPercentage?: number;
  yearsExperience: string;
  description: string;
  icon: string;
  techColor: string;
  specialties: string[];
  'data-sal'?: string;
  'data-sal-delay'?: string | number;
  'data-sal-duration'?: string | number;
}

const { 
  name,
  proficiency,
  proficiencyPercentage = 85,
  yearsExperience,
  description,
  icon,
  techColor,
  specialties,
  ...props
} = Astro.props;

const proficiencyColors = {
  'Expert': 'var(--color-success)',
  'Advanced': 'var(--color-primary)',
  'Intermediate': 'var(--color-warning)',
  'Beginner': 'var(--color-info)'
};
---

<Card variant="skill" {...props}>
  <div class="skill-header">
    <div class="skill-icon">
      <i class={icon} style={`color: ${techColor};`}></i>
    </div>
    <div class="skill-meta">
      <h4 class="skill-name">{name}</h4>
      <div class="skill-badges">
        <span 
          class="proficiency-badge" 
          style={`background: ${proficiencyColors[proficiency]}20; color: ${proficiencyColors[proficiency]}; border-color: ${proficiencyColors[proficiency]};`}
        >
          {proficiency}
        </span>
        <span class="experience-badge">
          {yearsExperience} exp
        </span>
      </div>
    </div>
  </div>
  
  <p class="skill-description">{description}</p>
  
  <!-- Animated Progress Bar -->
  <div class="skill-progress">
    <div class="progress-header">
      <span class="progress-label">Proficiency</span>
      <span class="progress-percentage">{proficiencyPercentage}%</span>
    </div>
    <div class="progress-track">
      <div 
        class="progress-fill"
        data-percentage={proficiencyPercentage}
        style={`background: linear-gradient(90deg, ${techColor}, ${proficiencyColors[proficiency]});`}
      ></div>
    </div>
  </div>
  
  <div class="skill-specialties">
    {specialties.map(specialty => (
      <span class="specialty-tag">{specialty}</span>
    ))}
  </div>
</Card>

<style>
  @import '../../styles/sections/skill-item.css';
  
  /* Progress Bar Styles */
  .skill-progress {
    margin: 1rem 0;
  }
  
  .progress-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.5rem;
    font-size: 0.875rem;
  }
  
  .progress-label {
    color: var(--text-secondary);
    font-weight: 500;
  }
  
  .progress-percentage {
    color: var(--text-primary);
    font-weight: 600;
  }
  
  .progress-track {
    width: 100%;
    height: 8px;
    background: var(--bg-secondary);
    border-radius: 4px;
    overflow: hidden;
    position: relative;
  }
  
  .progress-fill {
    height: 100%;
    width: 0%;
    border-radius: 4px;
    transition: width 1.5s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
    overflow: hidden;
  }
  
  .progress-fill::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(90deg, 
      transparent 0%, 
      rgba(255, 255, 255, 0.3) 50%, 
      transparent 100%);
    animation: shimmer 2s infinite;
  }
  
  @keyframes shimmer {
    0% { transform: translateX(-100%); }
    100% { transform: translateX(100%); }
  }
  
  /* Animation trigger */
  .skill-progress.animate .progress-fill {
    width: var(--target-width);
  }
</style>

<script>
  // Animate progress bars when they come into view
  document.addEventListener('DOMContentLoaded', function() {
    const progressBars = document.querySelectorAll('.progress-fill');
    
    const animateProgressBar = (progressBar) => {
      const percentage = progressBar.getAttribute('data-percentage');
      const progressContainer = progressBar.closest('.skill-progress');
      
      if (percentage && progressContainer) {
        progressContainer.classList.add('animate');
        progressBar.style.setProperty('--target-width', `${percentage}%`);
      }
    };
    
    // Intersection Observer for animation triggers
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const progressBar = entry.target.querySelector('.progress-fill');
          if (progressBar) {
            setTimeout(() => animateProgressBar(progressBar), 200);
            observer.unobserve(entry.target);
          }
        }
      });
    }, {
      threshold: 0.5,
      rootMargin: '0px 0px -50px 0px'
    });
    
    // Observe skill items
    const skillItems = document.querySelectorAll('.skill-progress');
    skillItems.forEach(item => observer.observe(item));
  });
</script>